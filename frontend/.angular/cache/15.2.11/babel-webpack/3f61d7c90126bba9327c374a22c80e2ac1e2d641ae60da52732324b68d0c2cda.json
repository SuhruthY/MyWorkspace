{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(http) {\n    this.http = http;\n    // Update the path if your backend uses a different endpoint\n    // For example, if backend uses /api/v1/employees:\n    // private apiUrl = `${environment.apiUrl}/v1/employees`;\n    this.apiUrl = `${environment.apiUrl}/employees`;\n  }\n  getEmployees() {\n    return this.http.get(this.apiUrl).pipe(map(res => res.data) // adjust if backend wraps data, otherwise use: map(res => res)\n    );\n  }\n\n  getEmployee(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createEmployee(employee) {\n    return this.http.post(this.apiUrl, employee);\n  }\n  updateEmployee(id, employee) {\n    return this.http.put(`${this.apiUrl}/${id}`, employee);\n  }\n  deleteEmployee(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getEmployeesByDepartment(department) {\n    return this.http.get(`${this.apiUrl}/department/${department}`);\n  }\n  static {\n    this.ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,eAAe;EAM1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB;IACA;IACA;IACQ,WAAM,GAAG,GAAGJ,WAAW,CAACK,MAAM,YAAY;EAEV;EAExCC,YAAY;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CACzCP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC;IAAA,CACtB;EACH;;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,MAAM,IAAIO,EAAE,EAAE,CAAC;EACxD;EAEAC,cAAc,CAACC,QAAkB;IAC/B,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAW,IAAI,CAACV,MAAM,EAAES,QAAQ,CAAC;EACxD;EAEAE,cAAc,CAACJ,EAAU,EAAEE,QAAkB;IAC3C,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACZ,MAAM,IAAIO,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAClE;EAEAI,cAAc,CAACN,EAAU;IACvB,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACd,MAAM,IAAIO,EAAE,EAAE,CAAC;EACvD;EAEAQ,wBAAwB,CAACC,UAAkB;IACzC,OAAO,IAAI,CAACjB,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,MAAM,eAAegB,UAAU,EAAE,CAAC;EAC7E;;;uBAhCWnB,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAoB,SAAfpB,eAAe;MAAAqB,YAFd;IAAM;EAAA","names":["environment","map","EmployeeService","constructor","http","apiUrl","getEmployees","get","pipe","res","data","getEmployee","id","createEmployee","employee","post","updateEmployee","put","deleteEmployee","delete","getEmployeesByDepartment","department","factory","providedIn"],"sourceRoot":"","sources":["/workspaces/MyWorkspace/frontend/src/app/services/employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Employee } from '../models/employee';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n  // Update the path if your backend uses a different endpoint\n  // For example, if backend uses /api/v1/employees:\n  // private apiUrl = `${environment.apiUrl}/v1/employees`;\n  private apiUrl = `${environment.apiUrl}/employees`;\n\n  constructor(private http: HttpClient) { }\n\n  getEmployees(): Observable<Employee[]> {\n    return this.http.get<any>(this.apiUrl).pipe(\n      map(res => res.data) // adjust if backend wraps data, otherwise use: map(res => res)\n    );\n  }\n\n  getEmployee(id: number): Observable<Employee> {\n    return this.http.get<Employee>(`${this.apiUrl}/${id}`);\n  }\n\n  createEmployee(employee: Employee): Observable<Employee> {\n    return this.http.post<Employee>(this.apiUrl, employee);\n  }\n\n  updateEmployee(id: number, employee: Employee): Observable<Employee> {\n    return this.http.put<Employee>(`${this.apiUrl}/${id}`, employee);\n  }\n\n  deleteEmployee(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  getEmployeesByDepartment(department: string): Observable<Employee[]> {\n    return this.http.get<Employee[]>(`${this.apiUrl}/department/${department}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}